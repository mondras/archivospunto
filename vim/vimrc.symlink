" Vundle setup
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

" Repos
Plugin 'kien/ctrlp.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'altercation/vim-colors-solarized'
Plugin 'mileszs/ack.vim'
" Plugin 'jamessan/vim-gnupg'
" Plugin 'slim-template/vim-slim'
" Plugin 'groenewege/vim-less'
Plugin 'tpope/vim-fugitive'
Plugin 'bling/vim-airline'
" Plugin 'vim-ruby/vim-ruby'
Plugin 'kana/vim-smartinput'
Plugin 'tommcdo/vim-exchange'
" Plugin 'leafgarland/typescript-vim'

" LSP
Plugin 'prabirshrestha/async.vim'
Plugin 'prabirshrestha/vim-lsp'

" Testing this ones
" Plugin 'tpope/vim-rails'
" Plugin 'scrooloose/syntastic'
Plugin 'bling/vim-bufferline'

" Vundle wrap-up
call vundle#end()            " required
filetype plugin indent on    " required

" My stuff
set encoding=utf-8                " Encoding UTF8
" syntax enable                     " Turn on syntax highlighting.
filetype on                       " Enable file type detection.
filetype indent on                " Enable specific indent.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=longest:full,full    " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.
set ai                            " Auto indent

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

set softtabstop=2
set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                 " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

set cursorline                   " Hightlights the current line
set colorcolumn=81               " Display 80 chars column

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

" Automatic fold settings for specific files. Uncomment to use.
" autocmd FileType ruby setlocal foldmethod=syntax
" autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

" Unicode characters
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  "set encoding=utf-8
  "etglobal fileencoding=utf-8 bomb
  "et fileencodings=ucs-bom,utf-8,latin1
endif

" Rspec
map <leader>r :Rake<cr>
map <leader>R :.Rake<cr>

" Encoding
"set ff=unix fenc=utf-8 enc=utf-8

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nmap _= :call Preserve("normal gg=G")<CR>

" ActionScript
au Bufread,BufNewFile *.as set filetype=actionscript " Load as files
autocmd FileType actionscript setlocal sw=2 sts=2 et " Set indentation level
autocmd BufNewFile,BufRead *.mxml,*.as :nmap <C-B> :!bash ~/.vim/bin/fcshcmp.sh %:p
autocmd BufNewFile,BufRead *.mxml,*.as :nmap <C-A> :!bash ~/.vim/bin/fcshcmp.sh %:p run

let g:gist_clip_command = 'pbcopy' " Gist: copy using system clipboard
let g:gist_detect_filetype = 1     " Auto detect file type

let g:Powerline_symbols = 'fancy'  " Display fancy characters in powerline
set t_Co=256                       " Explicitly tell Vim that the terminal supports 256 colors

" Display trailing white spaces
highlight ExtraWhitespace ctermbg=darkred guibg=red   " Set color
match ExtraWhitespace /\s\+\%#\@<!$/                  " Whitespace regex
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/ " Don't display in insert mode
au InsertLeave * match ExtraWhitespace /\s\+$/        " Display after exiting insert mode


" OLD STUFF
syntax enable
set background=dark
colorscheme solarized

set smartindent
nmap ff :FufFile **/<CR>
" Copy / Pasta
nmap cpasta :w !pbcopy
set expandtab
set softtabstop=2
set shiftwidth=2
set ts=2
set hidden
set hlsearch
set incsearch
set iskeyword-=_

" Numbers gutter
set number
set numberwidth=1
nmap <C-N><C-N> :set invnumber<CR>
set ruler

set clipboard=unnamed

" Remove all trailing withespaces
autocmd BufWritePre * :%s/\s\+$//e

" #######################################################
" Formatting
" #######################################################
highlight ColorColumn ctermbg=Cyan
set colorcolumn=80
:highlight ExtraWhitespace ctermbg=red guibg=red
:autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/

autocmd FileType python setlocal sw=4 sts=4 et " Set indentation level

" let the case be toggled in normal mode
map <expr> <F6> ToggleInsertCase()
" let the case be toggled in insert mode
imap <expr> <F6> ToggleInsertCase()

let lit = 0
func! ToggleInsertCase()
  let g:lit = 1 - g:lit
  if (g:lit == 1)
    highlight Normal ctermbg=Blue " the background color you want when uppercased
  else
    highlight Normal ctermbg=Black " the background color you want normally
  endif
  " don't insert anything when this function is called in normal mode
  return ""
endfunc

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$\|vendor$\|coverage$\|log$\|node_modules$',
  \ 'file': '\.exe$\|\.so$\|\.dat$'
  \ }

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

set guifont=Inconsolata\ for\ Powerline:h15
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set term=xterm-256color
set termencoding=utf-8

let g:syntastic_html_tidy_ignore_errors = [
	\  'trimming empty <button>',
	\  'trimming empty <span>',
	\  'trimming empty <i>',
	\  'trimming empty <h2>',
	\  '<link> proprietary attribute "integrity"',
	\  '<script> proprietary attribute "integrity"',
	\  '<input> proprietary attribute "validate"',
	\  '<input> proprietary attribute "required"',
	\  '<textarea> proprietary attribute "required"',
	\  '<iframe> proprietary attribute "allowfullscreen"',
	\ ]

"if executable('solargraph')
"  " gem install solargraph
"  au User lsp_setup call lsp#register_server({
"      \ 'name': 'solargraph',
"      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
"      \ 'initialization_options': {"diagnostics": "true"},
"      \ 'whitelist': ['ruby'],
"      \ })
"endif
